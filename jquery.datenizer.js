// Generated by CoffeeScript 1.3.3
(function() {
  var Calendar, DateSupport;

  Calendar = (function() {

    function Calendar(selectedDate) {
      this.selectedDate = selectedDate != null ? selectedDate : new Date;
      this.currentDate = this.selectedDate;
      this.element = jQuery("body").append("<div class='datenizer'></div>").children(".datenizer:last");
      this.render();
    }

    Calendar.prototype.locale = function() {
      return jQuery.datenizer.currentLocale;
    };

    Calendar.prototype.render = function() {
      this.element.empty();
      this.renderTable();
      this.renderDays();
      return this.element;
    };

    Calendar.prototype.renderTable = function() {
      var table;
      table = "<table class=\"calendar\">\n  <tr>\n    <th>" + (this.locale().abbrDayNames[0]) + "</th>\n    <th>" + (this.locale().abbrDayNames[1]) + "</th>\n    <th>" + (this.locale().abbrDayNames[2]) + "</th>\n    <th>" + (this.locale().abbrDayNames[3]) + "</th>\n    <th>" + (this.locale().abbrDayNames[4]) + "</th>\n    <th>" + (this.locale().abbrDayNames[5]) + "</th>\n    <th>" + (this.locale().abbrDayNames[6]) + "</th>\n  </tr>\n</table>";
      return this.element.append(table);
    };

    Calendar.prototype.renderDays = function() {
      var day, daysAfter, daysBefore, daysPerWeek, n, startDate, totalDays, totalDaysShown, _i, _ref;
      startDate = new DateSupport(this.currentDate).beginningOfMonth();
      totalDays = new DateSupport(this.currentDate).endOfMonth().getDate();
      daysBefore = startDate.getDay();
      daysPerWeek = 7;
      totalDaysShown = daysPerWeek * Math.ceil((totalDays + daysBefore) / daysPerWeek);
      daysAfter = totalDaysShown - (totalDays + daysBefore);
      for (n = _i = 0, _ref = totalDaysShown - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
        day = n - daysBefore + 1;
        if (day < 1) {
          day = new DateSupport(startDate).daysAgo(daysBefore - n).getDate();
        } else if (day > new DateSupport(startDate).daysInMonth()) {
          day = day - new DateSupport(startDate).daysInMonth();
        }
        if (n % daysPerWeek === 0) {
          this.element.children(".calendar").append("<tr></tr>");
        }
        this.element.find(".calendar tr:last").append("<td>" + day + "</td>");
      }
      return this.element;
    };

    return Calendar;

  })();

  DateSupport = (function() {

    function DateSupport(current) {
      this.current = current != null ? current : new Date;
    }

    DateSupport.prototype.isLeapYear = function() {
      var year;
      year = this.current.getFullYear();
      return ((0 === year % 4) && (0 !== year % 100)) || (0 === year);
    };

    DateSupport.prototype.beginningOfMonth = function() {
      return new Date(this.current.getFullYear(), this.current.getMonth());
    };

    DateSupport.prototype.endOfMonth = function() {
      var date, n, _i;
      for (n = _i = 31; _i >= 28; n = --_i) {
        date = new Date(this.current.getFullYear(), this.current.getMonth(), n);
        if (date.getMonth() === this.current.getMonth()) {
          break;
        }
      }
      return date;
    };

    DateSupport.prototype.daysInMonth = function() {
      return [31, (this.isLeapYear() ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][this.current.getMonth()];
    };

    DateSupport.prototype.daysAgo = function(n) {
      var dateInMiliseconds, daysInMiliseconds;
      daysInMiliseconds = n * 24 * 60 * 60 * 1000;
      dateInMiliseconds = Date.parse(this.current.toString());
      return new Date(dateInMiliseconds - daysInMiliseconds);
    };

    return DateSupport;

  })();

  jQuery(function($) {
    $.datenizer = {
      _defaultLocale: {
        monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        abbrMonthNames: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        abbrDayNames: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
      },
      setLocale: function(locale) {
        return this.currentLocale = this.locale[locale];
      }
    };
    $.datenizer.currentLocale = $.datenizer._defaultLocale;
    return $.fn.datenizer = function() {
      return new Calendar;
    };
  });

}).call(this);
